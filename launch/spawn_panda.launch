<?xml version="1.0" encoding="utf-8"?>
<launch>
    <arg name="load_gripper" default="true" />
    <arg name="use_ros_control" default="true" />
    <arg name="reconcycle_sim_controllers" default="false" />
    <arg name="joint_trajectory_controllers" default="false" />
    <arg name="justagist_control" default="false" />

    <arg name="robot" default="panda" />
    <arg name="initX" default="0" />
    <arg name="initY" default="0" />

    <rosparam command="load" file="$(find reconcycle_simulation)/conf/robot_details.yaml" />
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find franka_panda_description)/robots/panda_arm_hand.urdf.xacro
                        load_gripper:=$(arg load_gripper)
                        load_gazebo:=true
                        use_gazebo_control:=true" /> <!-- use_gazebo_control = standard ros_control hardware interface -->

    <param name="/arm/root_name" value="panda_link0" />
    <param if="$(arg load_gripper)" name="/arm/tip_name" value="panda_hand" />
    <param unless="$(arg load_gripper)" name="/arm/tip_name" value="panda_link8" />
    <param if="$(arg load_gripper)" name="/franka_gripper/robot_ip" value="sim" />
    <param if="$(arg load_gripper)" name="/arm/gravity_tip_name" value="panda_hand" />
    <param unless="$(arg load_gripper)" name="/arm/gravity_tip_name" value="panda_link8" />

    <!-- Spawn urdf of the robot -->
    <node name="robot_description" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot)  -x $(arg initX) -y $(arg initY)" />

    <!-- create a tf with base frame as 'base' (to match aml_robot) -->
    <node pkg="tf" type="static_transform_publisher" name="base_to_link0" args="0 0 0 0 0 0 1 base panda_link0 100" />
    <node pkg="tf" type="static_transform_publisher" name="world_to_base" args="0 0 0 0 0 0 1 world base 100" />

    <!-- launch controllers -->
    <group if="$(arg use_ros_control)">
        <!-- launch standard ros controller -->
        <include file="$(find gazebo_panda)/launch/panda_sim_controllers.launch">
            <arg name="gui" value="false" />
            <arg name="ns" value="$(arg robot)" />
            <arg name="load_gripper" value="$(arg load_gripper)" />
        </include>      
    </group>


  <!-- launch controllers -->
  <group if="$(arg reconcycle_sim_controllers)">
    <!-- start reconcycle joint controller  -->
    <include file="$(find panda_action_servers)/launch/sim_joint_impedance.launch" />
  </group>
  <group if="$(arg joint_trajectory_controllers)">
    <!-- start joint trajectory controller as a workaround so that the robot stays at place -->
    <include file="$(find panda_action_servers)/launch/sim_joint_trajectory.launch" />
  </group>


    <group if="$(arg justagist_control)">
        <!-- launch justagist controllers -->
        <include file="$(find panda_sim_controllers)/launch/panda_sim_controllers.launch">
            <arg name="gui" value="false" /> 
            <arg name="ns" value="$(arg robot)" />
            <arg name="load_gripper" value="$(arg load_gripper)" />
        </include>
    </group>
    

</launch>
